Traceback (most recent call last):
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
energy_trainer = EnergyTrainer(
    task=task,
    model=copy.deepcopy(model), # copied for later use, not necessary in practice.
    dataset=dataset,
    optimizer=optimizer,
    identifier="IS2RE-example",
    run_dir="./", # directory to save results if is_debug=False. Prediction files are saved here so be careful not to override!
    is_debug=False, # if True, do not save checkpoint, logs, or results
    print_every=5,
    seed=0, # random seed to use
    logger="tensorboard", # logger of choice (tensorboard and wandb supported)
    local_rank=0,
    amp=True, # use PyTorch Automatic Mixed Precision (faster training and less memory usage)    
)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn [6], line 1[0m
[0;32m----> 1[0m energy_trainer [38;5;241m=[39m [43mEnergyTrainer[49m[43m([49m
[1;32m      2[0m [43m    [49m[43mtask[49m[38;5;241;43m=[39;49m[43mtask[49m[43m,[49m
[1;32m      3[0m [43m    [49m[43mmodel[49m[38;5;241;43m=[39;49m[43mcopy[49m[38;5;241;43m.[39;49m[43mdeepcopy[49m[43m([49m[43mmodel[49m[43m)[49m[43m,[49m[43m [49m[38;5;66;43;03m# copied for later use, not necessary in practice.[39;49;00m
[1;32m      4[0m [43m    [49m[43mdataset[49m[38;5;241;43m=[39;49m[43mdataset[49m[43m,[49m
[1;32m      5[0m [43m    [49m[43moptimizer[49m[38;5;241;43m=[39;49m[43moptimizer[49m[43m,[49m
[1;32m      6[0m [43m    [49m[43midentifier[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mIS2RE-example[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m      7[0m [43m    [49m[43mrun_dir[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43m./[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;66;43;03m# directory to save results if is_debug=False. Prediction files are saved here so be careful not to override![39;49;00m
[1;32m      8[0m [43m    [49m[43mis_debug[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m[43m [49m[38;5;66;43;03m# if True, do not save checkpoint, logs, or results[39;49;00m
[1;32m      9[0m [43m    [49m[43mprint_every[49m[38;5;241;43m=[39;49m[38;5;241;43m5[39;49m[43m,[49m
[1;32m     10[0m [43m    [49m[43mseed[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m[43m [49m[38;5;66;43;03m# random seed to use[39;49;00m
[1;32m     11[0m [43m    [49m[43mlogger[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mtensorboard[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;66;43;03m# logger of choice (tensorboard and wandb supported)[39;49;00m
[1;32m     12[0m [43m    [49m[43mlocal_rank[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m,[49m
[1;32m     13[0m [43m    [49m[43mamp[49m[38;5;241;43m=[39;49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[38;5;66;43;03m# use PyTorch Automatic Mixed Precision (faster training and less memory usage)    [39;49;00m
[1;32m     14[0m [43m)[49m

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/trainers/energy_trainer.py:78[0m, in [0;36mEnergyTrainer.__init__[0;34m(self, task, model, dataset, optimizer, identifier, normalizer, timestamp_id, run_dir, is_debug, is_hpo, print_every, seed, logger, local_rank, amp, cpu, slurm, noddp)[0m
[1;32m     57[0m [38;5;28;01mdef[39;00m [38;5;21m__init__[39m(
[1;32m     58[0m     [38;5;28mself[39m,
[1;32m     59[0m     task,
[0;32m   (...)[0m
[1;32m     76[0m     noddp[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[1;32m     77[0m ):
[0;32m---> 78[0m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[38;5;241;43m.[39;49m[38;5;21;43m__init__[39;49m[43m([49m
[1;32m     79[0m [43m        [49m[43mtask[49m[38;5;241;43m=[39;49m[43mtask[49m[43m,[49m
[1;32m     80[0m [43m        [49m[43mmodel[49m[38;5;241;43m=[39;49m[43mmodel[49m[43m,[49m
[1;32m     81[0m [43m        [49m[43mdataset[49m[38;5;241;43m=[39;49m[43mdataset[49m[43m,[49m
[1;32m     82[0m [43m        [49m[43moptimizer[49m[38;5;241;43m=[39;49m[43moptimizer[49m[43m,[49m
[1;32m     83[0m [43m        [49m[43midentifier[49m[38;5;241;43m=[39;49m[43midentifier[49m[43m,[49m
[1;32m     84[0m [43m        [49m[43mnormalizer[49m[38;5;241;43m=[39;49m[43mnormalizer[49m[43m,[49m
[1;32m     85[0m [43m        [49m[43mtimestamp_id[49m[38;5;241;43m=[39;49m[43mtimestamp_id[49m[43m,[49m
[1;32m     86[0m [43m        [49m[43mrun_dir[49m[38;5;241;43m=[39;49m[43mrun_dir[49m[43m,[49m
[1;32m     87[0m [43m        [49m[43mis_debug[49m[38;5;241;43m=[39;49m[43mis_debug[49m[43m,[49m
[1;32m     88[0m [43m        [49m[43mis_hpo[49m[38;5;241;43m=[39;49m[43mis_hpo[49m[43m,[49m
[1;32m     89[0m [43m        [49m[43mprint_every[49m[38;5;241;43m=[39;49m[43mprint_every[49m[43m,[49m
[1;32m     90[0m [43m        [49m[43mseed[49m[38;5;241;43m=[39;49m[43mseed[49m[43m,[49m
[1;32m     91[0m [43m        [49m[43mlogger[49m[38;5;241;43m=[39;49m[43mlogger[49m[43m,[49m
[1;32m     92[0m [43m        [49m[43mlocal_rank[49m[38;5;241;43m=[39;49m[43mlocal_rank[49m[43m,[49m
[1;32m     93[0m [43m        [49m[43mamp[49m[38;5;241;43m=[39;49m[43mamp[49m[43m,[49m
[1;32m     94[0m [43m        [49m[43mcpu[49m[38;5;241;43m=[39;49m[43mcpu[49m[43m,[49m
[1;32m     95[0m [43m        [49m[43mname[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mis2re[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     96[0m [43m        [49m[43mslurm[49m[38;5;241;43m=[39;49m[43mslurm[49m[43m,[49m
[1;32m     97[0m [43m        [49m[43mnoddp[49m[38;5;241;43m=[39;49m[43mnoddp[49m[43m,[49m
[1;32m     98[0m [43m    [49m[43m)[49m

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/trainers/base_trainer.py:205[0m, in [0;36mBaseTrainer.__init__[0;34m(self, task, model, dataset, optimizer, identifier, normalizer, timestamp_id, run_dir, is_debug, is_hpo, print_every, seed, logger, local_rank, amp, cpu, name, slurm, noddp)[0m
[1;32m    203[0m [38;5;28;01mif[39;00m distutils[38;5;241m.[39mis_master():
[1;32m    204[0m     [38;5;28mprint[39m(yaml[38;5;241m.[39mdump([38;5;28mself[39m[38;5;241m.[39mconfig, default_flow_style[38;5;241m=[39m[38;5;28;01mFalse[39;00m))
[0;32m--> 205[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mload[49m[43m([49m[43m)[49m
[1;32m    207[0m [38;5;28mself[39m[38;5;241m.[39mevaluator [38;5;241m=[39m Evaluator(task[38;5;241m=[39mname)

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/trainers/base_trainer.py:214[0m, in [0;36mBaseTrainer.load[0;34m(self)[0m
[1;32m    212[0m [38;5;28mself[39m[38;5;241m.[39mload_datasets()
[1;32m    213[0m [38;5;28mself[39m[38;5;241m.[39mload_task()
[0;32m--> 214[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mload_model[49m[43m([49m[43m)[49m
[1;32m    215[0m [38;5;28mself[39m[38;5;241m.[39mload_loss()
[1;32m    216[0m [38;5;28mself[39m[38;5;241m.[39mload_optimizer()

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/trainers/base_trainer.py:369[0m, in [0;36mBaseTrainer.load_model[0;34m(self)[0m
[1;32m    364[0m bond_feat_dim [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mconfig[[38;5;124m"[39m[38;5;124mmodel_attributes[39m[38;5;124m"[39m][38;5;241m.[39mget(
[1;32m    365[0m     [38;5;124m"[39m[38;5;124mnum_gaussians[39m[38;5;124m"[39m, [38;5;241m50[39m
[1;32m    366[0m )
[1;32m    368[0m loader [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mtrain_loader [38;5;129;01mor[39;00m [38;5;28mself[39m[38;5;241m.[39mval_loader [38;5;129;01mor[39;00m [38;5;28mself[39m[38;5;241m.[39mtest_loader
[0;32m--> 369[0m [38;5;28mself[39m[38;5;241m.[39mmodel [38;5;241m=[39m [43mregistry[49m[38;5;241;43m.[39;49m[43mget_model_class[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconfig[49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mmodel[39;49m[38;5;124;43m"[39;49m[43m][49m[43m)[49m[43m([49m
[1;32m    370[0m [43m    [49m[43mloader[49m[38;5;241;43m.[39;49m[43mdataset[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[43mx[49m[38;5;241;43m.[39;49m[43mshape[49m[43m[[49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m][49m
[1;32m    371[0m [43m    [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mloader[49m
[1;32m    372[0m [43m    [49m[38;5;129;43;01mand[39;49;00m[43m [49m[38;5;28;43mhasattr[39;49m[43m([49m[43mloader[49m[38;5;241;43m.[39;49m[43mdataset[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mx[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m    373[0m [43m    [49m[38;5;129;43;01mand[39;49;00m[43m [49m[43mloader[49m[38;5;241;43m.[39;49m[43mdataset[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m[38;5;241;43m.[39;49m[43mx[49m[43m [49m[38;5;129;43;01mis[39;49;00m[43m [49m[38;5;129;43;01mnot[39;49;00m[43m [49m[38;5;28;43;01mNone[39;49;00m
[1;32m    374[0m [43m    [49m[38;5;28;43;01melse[39;49;00m[43m [49m[38;5;28;43;01mNone[39;49;00m[43m,[49m
[1;32m    375[0m [43m    [49m[43mbond_feat_dim[49m[43m,[49m
[1;32m    376[0m [43m    [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mnum_targets[49m[43m,[49m
[1;32m    377[0m [43m    [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconfig[49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mmodel_attributes[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m
[1;32m    378[0m [43m[49m[43m)[49m[38;5;241m.[39mto([38;5;28mself[39m[38;5;241m.[39mdevice)
[1;32m    380[0m [38;5;28;01mif[39;00m distutils[38;5;241m.[39mis_master():
[1;32m    381[0m     logging[38;5;241m.[39minfo(
[1;32m    382[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;124mLoaded [39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mmodel[38;5;241m.[39m[38;5;18m__class__[39m[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m}[39;00m[38;5;124m with [39m[38;5;124m"[39m
[1;32m    383[0m         [38;5;124mf[39m[38;5;124m"[39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39mmodel[38;5;241m.[39mnum_params[38;5;132;01m}[39;00m[38;5;124m parameters.[39m[38;5;124m"[39m
[1;32m    384[0m     )

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/models/gemnet/gemnet.py:261[0m, in [0;36mGemNetT.__init__[0;34m(self, num_atoms, bond_feat_dim, num_targets, num_spherical, num_radial, num_blocks, emb_size_atom, emb_size_edge, emb_size_trip, emb_size_rbf, emb_size_cbf, emb_size_bil_trip, num_before_skip, num_after_skip, num_concat, num_atom, regress_forces, direct_forces, cutoff, max_neighbors, rbf, envelope, cbf, extensive, otf_graph, use_pbc, output_init, activation, num_elements, scale_file)[0m
[1;32m    252[0m [38;5;28mself[39m[38;5;241m.[39mint_blocks [38;5;241m=[39m torch[38;5;241m.[39mnn[38;5;241m.[39mModuleList(int_blocks)
[1;32m    254[0m [38;5;28mself[39m[38;5;241m.[39mshared_parameters [38;5;241m=[39m [
[1;32m    255[0m     ([38;5;28mself[39m[38;5;241m.[39mmlp_rbf3[38;5;241m.[39mlinear[38;5;241m.[39mweight, [38;5;28mself[39m[38;5;241m.[39mnum_blocks),
[1;32m    256[0m     ([38;5;28mself[39m[38;5;241m.[39mmlp_cbf3[38;5;241m.[39mweight, [38;5;28mself[39m[38;5;241m.[39mnum_blocks),
[1;32m    257[0m     ([38;5;28mself[39m[38;5;241m.[39mmlp_rbf_h[38;5;241m.[39mlinear[38;5;241m.[39mweight, [38;5;28mself[39m[38;5;241m.[39mnum_blocks),
[1;32m    258[0m     ([38;5;28mself[39m[38;5;241m.[39mmlp_rbf_out[38;5;241m.[39mlinear[38;5;241m.[39mweight, [38;5;28mself[39m[38;5;241m.[39mnum_blocks [38;5;241m+[39m [38;5;241m1[39m),
[1;32m    259[0m ]
[0;32m--> 261[0m [43mload_scales_compat[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mscale_file[49m[43m)[49m

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/modules/scaling/compat.py:55[0m, in [0;36mload_scales_compat[0;34m(module, scale_file)[0m
[1;32m     52[0m [38;5;28;01mdef[39;00m [38;5;21mload_scales_compat[39m(
[1;32m     53[0m     module: nn[38;5;241m.[39mModule, scale_file: Optional[Union[[38;5;28mstr[39m, ScaleDict]]
[1;32m     54[0m ):
[0;32m---> 55[0m     scale_dict [38;5;241m=[39m [43m_load_scale_dict[49m[43m([49m[43mscale_file[49m[43m)[49m
[1;32m     56[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m scale_dict:
[1;32m     57[0m         [38;5;28;01mreturn[39;00m

File [0;32m~/work/ml_catalysis_tutorials/ml_catalysis_tutorials/ocp/ocpmodels/modules/scaling/compat.py:31[0m, in [0;36m_load_scale_dict[0;34m(scale_file)[0m
[1;32m     29[0m path [38;5;241m=[39m Path(scale_file)
[1;32m     30[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m path[38;5;241m.[39mexists():
[0;32m---> 31[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mScale file [39m[38;5;132;01m{[39;00mpath[38;5;132;01m}[39;00m[38;5;124m does not exist.[39m[38;5;124m"[39m)
[1;32m     33[0m scale_dict: Optional[ScaleDict] [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m     34[0m [38;5;28;01mif[39;00m path[38;5;241m.[39msuffix [38;5;241m==[39m [38;5;124m"[39m[38;5;124m.pt[39m[38;5;124m"[39m:

[0;31mValueError[0m: Scale file configs/s2ef/all/gemnet/scaling_factors/gemnet-dT.json does not exist.
ValueError: Scale file configs/s2ef/all/gemnet/scaling_factors/gemnet-dT.json does not exist.

