Traceback (most recent call last):
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/micromamba-root/envs/buildenv/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import os

import ase.io
import numpy as np
from ase import Atoms
from ase.build import fcc100
from ase.calculators.emt import EMT
from ase.constraints import FixAtoms
from ase.io import extxyz
from ase.io.trajectory import Trajectory
from ase.optimize import LBFGS

# This cell sets up and runs a structural relaxation
# of a Cu(100) surface. It uses ASE scripts to make the surface.
# The actual surfaces in OC20 were prepared slightly differently.

# Make the bare slab using an ASE helper script
adslab = fcc100("Cu", size=(3, 3, 3))

# Now, let's add the adsorbate to the bare slab
adsorbate = molecule("CH3O")
add_adsorbate(adslab, adsorbate, 3, offset=(1, 1))  # adslab = adsorbate + slab

# Tag all slab atoms below surface as 0, surface as 1, adsorbate as 2
tags = np.zeros(len(adslab))
tags[18:27] = 1
tags[28:] = 2
adslab.set_tags(tags)

# Fixed atoms are prevented from moving during a structure relaxation.
# We fix all slab atoms beneath the surface.
cons = FixAtoms(indices=[atom.index for atom in slab if (atom.tag == 0)])
adslab.set_constraint(cons)
adslab.center(vacuum=13.0, axis=2)
adslab.set_pbc(True)

# Set the toy calculator (EMT) so ASE knows how to get energies/forces
# at each step
adslab.set_calculator(EMT())

os.makedirs("data", exist_ok=True)

# Define structure optimizer - LBFGS. Run for 100 steps,
# or if the max force on all atoms (fmax) is below 0 ev/A.
# fmax is typically set to 0.01-0.05 eV/A,
# for this demo however we run for the full 100 steps.

dyn = LBFGS(adslab, trajectory="data/Cu100+CH3O.traj")
dyn.run(fmax=0.03, steps=100)

adslab_traj = ase.io.read("data/Cu100+CH3O.traj", ":")

# convert traj format to extxyz format (used by OC20 dataset)
columns = ["symbols", "positions", "move_mask", "tags"]
with open("data/Cu100+CH3O.extxyz", "w") as f:
    extxyz.write_xyz(f, adslab_traj, columns=columns)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn [4], line 21[0m
[1;32m     18[0m adslab [38;5;241m=[39m fcc100([38;5;124m"[39m[38;5;124mCu[39m[38;5;124m"[39m, size[38;5;241m=[39m([38;5;241m3[39m, [38;5;241m3[39m, [38;5;241m3[39m))
[1;32m     20[0m [38;5;66;03m# Now, let's add the adsorbate to the bare slab[39;00m
[0;32m---> 21[0m adsorbate [38;5;241m=[39m [43mmolecule[49m([38;5;124m"[39m[38;5;124mCH3O[39m[38;5;124m"[39m)
[1;32m     22[0m add_adsorbate(adslab, adsorbate, [38;5;241m3[39m, offset[38;5;241m=[39m([38;5;241m1[39m, [38;5;241m1[39m))  [38;5;66;03m# adslab = adsorbate + slab[39;00m
[1;32m     24[0m [38;5;66;03m# Tag all slab atoms below surface as 0, surface as 1, adsorbate as 2[39;00m

[0;31mNameError[0m: name 'molecule' is not defined
NameError: name 'molecule' is not defined

